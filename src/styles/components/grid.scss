// Define global variables for gap, padding, and minimum size
$gap: 1rem;
$padding: 1rem;
$min: 12rem;

// Styling for the .frame class inside .grid
.grid .frame {
    $ar: 2;
    box-sizing: border-box;

    max-width: 100%;
    aspect-ratio: var(--ar, $ar);

    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;

    border: solid 1px var(--color);
    border-radius: 1rem;
}

// Styling for .grid class, excluding .lite variant
.grid:not(.lite) {
    display: grid;
    gap: var(--gap, $gap);

    // Define grid template columns for old and new browsers
    grid-template-columns: repeat(auto-fit, minmax(var(--min, $min), var(--max, 1fr))); /* Old Browsers (no "min()") */
    grid-template-columns: repeat(auto-fit, minmax(min(var(--min, $min), var(--max, 100%)), var(--max, 1fr))); /* New Browser (yes "min()")*/

    justify-content: center;

    // Loop to handle different numbers of items in the grid
    @for $i from 1 through 3 {
        /* Only $i */
        &:has(
            .item:nth-last-child(n + #{$i}):nth-last-child(-n + #{$i}):first-child,
            .item:nth-last-child(n + #{$i}):nth-last-child(-n + #{$i}):first-child ~ .item
        ) {
            // Define grid template columns for old and new browsers
            grid-template-columns: repeat(#{$i + 2}, minmax(0, 1fr)); /* Old Browsers (no "min()") */
            grid-template-columns: repeat(#{$i + 2}, minmax(min(0, 100%), 1fr)); /* New Browser (yes "min()")*/

            .item {
                // Adjust grid columns based on item position
                &:first-child:not(:last-child) {
                    grid-column: 2 / 3;
                }
                &:last-child:not(:first-child) {
                    grid-column: -3 / -2;
                }
                &:first-child:last-child {
                    grid-column: 2 / -2;
                }
                &:nth-child(2):not(:first-child, :last-child) {
                    grid-column: 3 / -3;
                }
            }
        }
    }
}

// Styling for .item class
.item {
    box-sizing: border-box;
    padding: $padding;

    // aspect-ratio: 3 / 4;

    background: var(--middle-color);
    color: inherit;

    border-radius: $gap;
    
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: $padding;

    text-decoration: inherit;

    // Styling for the image inside .item
    &__img {
        width: 100%;
        aspect-ratio: 1;

        background-image: var(--placeholder, url('/assets/placeholder.svg'));
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;

        border-radius: #{$gap - $padding};
    }

    // Styling for the info section inside .item
    &__info {
        overflow-x: hidden;
        display: grid;
        gap: $padding;
    }

    // Ensure max-width for info, title, and content sections
    &__info, &__title, &__content {
        max-width: 100%;
    }

    // Styling for title and content inside .item
    &__title, &__content {
        margin-block: 0;
        margin-inline: auto;
        height: fit-content;
        text-align: center;
    }

    // Additional styling for content inside .item
    &__content {
        text-wrap: wrap;
        text-overflow: ellipsis;
    }
}